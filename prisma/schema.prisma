// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model Users {
  id                     String         @id @default(uuid()) @db.Uuid
  username               String
  user_email             String         @unique
  user_password          String
  profile_picture_url    String         @default("")
  bio                    String         @default("")
  account_status         Boolean        @default(true)
  social_links           String[]       @default([])
  email_verified         Boolean        @default(false)
  mentor_specializations String[]       @default([])
  mentor_verived         Boolean        @default(false)
  role                   Role           @default(user)
  auth_token             String[]       @default([])
  createAt               DateTime       @default(now())
  updateAt               DateTime       @updatedAt
  Notification           Notification[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  image       String
  price       Float
  category    String
  description String
  features    String[]
  demo        String?
  tools       Tols[]   @relation("ProductTools")
  rating      Float    @default(0)
  sales       Int      @default(0)
  status      Status   @default(Active)
  revenue     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]
}

model Tols {
  id       String    @id @default(uuid())
  name     String    @unique
  icon     String
  products Product[] @relation("ProductTools")
}

model Order {
  id          String      @id
  user_id     String
  product_id  String
  total_price Int
  status      StatusOrder @default(Panding)
  createAt    DateTime    @default(now())
  updateAt    DateTime    @updatedAt
}

enum StatusOrder {
  Panding
  Process
  Finished
  Cancelled
}

model Review {
  id        Int      @id @default(autoincrement())
  user      String
  rating    Int
  date      DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

enum Status {
  Active
  Inactive
}

enum NotificationType {
  PRODUCT_CREATED
  PRODUCT_UPDATED
  NEW_ORDER_RECEIVED
  ORDER_STATUS
  NEW_REVIEW_SUBMITTED
}

model Notification {
  id        String           @id @default(uuid())
  content   String
  isRead    Boolean          @default(false)
  type      NotificationType
  link      String?
  createdAt DateTime         @default(now())
  user      Users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String           @db.Uuid
}
